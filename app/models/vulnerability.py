"""
Vulnerability Model for storing security vulnerabilities found during scans
"""
from datetime import datetime, timezone
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.dialects.postgresql import JSON
from sqlalchemy.ext.mutable import MutableDict

db = SQLAlchemy()

def utc_now():
    """Get current UTC time"""
    return datetime.now(timezone.utc)

class Vulnerability(db.Model):
    """Database model for storing vulnerability information"""
    __tablename__ = 'vulnerabilities'
    
    id = db.Column(db.Integer, primary_key=True)
    scan_id = db.Column(db.String(50), db.ForeignKey('scans.scan_id'), nullable=False)
    host_id = db.Column(db.Integer, db.ForeignKey('hosts.id'), nullable=False)
    port_id = db.Column(db.Integer, db.ForeignKey('ports.id'))
    title = db.Column(db.String(255), nullable=False)
    description = db.Column(db.Text)
    severity = db.Column(db.String(20), default="medium")  # low, medium, high, critical
    cve_id = db.Column(db.String(20))
    cvss_score = db.Column(db.Float)
    references = db.Column(MutableDict.as_mutable(JSON))
    discovered_at = db.Column(db.DateTime, default=utc_now)
    
    def __repr__(self):
        return f'<Vulnerability {self.title}>'
    
    def to_dict(self):
        """Convert vulnerability to dictionary"""
        return {
            'id': self.id,
            'scan_id': self.scan_id,
            'host_id': self.host_id,
            'port_id': self.port_id,
            'title': self.title,
            'description': self.description,
            'severity': self.severity,
            'cve_id': self.cve_id,
            'cvss_score': self.cvss_score,
            'references': self.references,
            'discovered_at': self.discovered_at.isoformat() if self.discovered_at else None
        }
